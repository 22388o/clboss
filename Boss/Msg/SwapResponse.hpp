#ifndef BOSS_MSG_SWAPRESPONSE_HPP
#define BOSS_MSG_SWAPRESPONSE_HPP

#include"Ln/Amount.hpp"
#include"Uuid.hpp"
#include<memory>

namespace Sqlite3 { class Tx; }

namespace Boss { namespace Msg {

/** struct Boss::Msg::SwapResponse
 *
 * @brief emitted whenever a swap is known to
 * have completed, either in failure or success.
 *
 * @desc A database transaction is also included
 * in this message, to ensure atomicity of the
 * swap manager informing the requesting module
 * of the swap response and the swap manager
 * removing the swap details from its database.
 *
 * The swap manager will normally commit the
 * transaction synchronously right after this
 * message is raised, though anyone subscribed
 * to this message can acquire and commit or
 * rollback the db transaction.
 * If rolled back, the swap manager will probably
 * re-emit this message later.
 */
struct SwapResponse {
	/* Database transaction that the swap
	 * manager has initiated.  */
	std::shared_ptr<Sqlite3::Tx> dbtx;

	/* ID generated by the requester.  */
	Uuid id;
	/* false if failed, true if succeed.  */
	bool success;
	/* Amount that was received.
	 * This can be lower than `min_offchain_amount`
	 * since the service will have deducted fees,
	 * onchain activity requires fees, etc.
	 */
	Ln::Amount onchain_amount;
};

}}

#endif /* !defined(BOSS_MSG_SWAPRESPONSE_HPP) */
